/**
 * This file was generated by kysely-codegen.
 * Please do not edit it manually.
 */

import type { ColumnType } from "kysely";

export type Generated<T> = T extends ColumnType<infer S, infer I, infer U>
  ? ColumnType<S, I | undefined, U>
  : ColumnType<T, T | undefined, T>;

export type Int8 = ColumnType<string, bigint | number | string, bigint | number | string>;

export type Json = JsonValue;

export type JsonArray = JsonValue[];

export type JsonObject = {
  [x: string]: JsonValue | undefined;
};

export type JsonPrimitive = boolean | number | string | null;

export type JsonValue = JsonArray | JsonObject | JsonPrimitive;

export type Timestamp = ColumnType<Date, Date | string, Date | string>;

export interface AssetPtr {
  hash: string;
  id: Generated<string>;
  path: string;
  project_name: string;
  rev: string;
}

export interface Assignment {
  data: Json;
  external_id: string;
  user_id: string;
}

export interface AssignmentSubmission {
  created: Generated<Timestamp>;
  external_id: string;
  id: Generated<string>;
  outcome: Json | null;
  submission: Json;
  user_id: string;
}

export interface Document {
  data: Json;
  hash: string;
  id: Generated<string>;
  project_name: string;
}

export interface DocumentPtr {
  doc_id: string;
  path: string;
  project_name: string;
  rev: string;
}

export interface Project {
  name: string;
  rev: string | null;
}

export interface ProjectGroup {
  group_name: string;
  project_name: string;
  user_id: string;
}

export interface ProjectRev {
  hash: string;
  project_name: string;
  rev: string;
}

export interface QuestionSubmission {
  created: Generated<Timestamp>;
  id: Generated<string>;
  outcome: Json | null;
  question_id: string;
  submission: Json;
  user_id: string;
}

export interface RepoQuestion {
  comment: string | null;
  created: Generated<Timestamp>;
  creator: string;
  id: Generated<string>;
  num: Generated<Int8>;
  type: string;
  workspace_id: string;
}

export interface RepoQuestionRev {
  created: Generated<Timestamp>;
  creator: string;
  data: Json | null;
  derived_from: string | null;
  id: Generated<string>;
  question_id: string;
}

export interface RepoQuestionTag {
  question_id: string;
  tag_id: string;
}

export interface RepoTag {
  id: Generated<string>;
  name: string;
  workspace_id: string;
}

export interface RepoTemplate {
  hash: string;
  id: Generated<string>;
  name: string;
}

export interface RepoWorksheet {
  created: Generated<Timestamp>;
  creator: string;
  id: Generated<string>;
  name: string;
  workspace_id: string;
}

export interface RepoWorksheetRev {
  created: Generated<Timestamp>;
  creator: string;
  data: Json | null;
  id: Generated<string>;
  template_id: string | null;
  worksheet_id: string;
}

export interface RepoWorkspace {
  id: Generated<string>;
  name: string;
}

export interface RepoWorkspaceGroup {
  group_name: string;
  user_id: string;
  workspace_id: string;
}

export interface Series {
  data: Json;
  path: string;
  project_name: string;
  rev: string;
}

export interface UserAccount {
  created: Generated<Timestamp>;
  email: string;
  id: Generated<string>;
  name: string | null;
}

export interface UserFederatedIdentity {
  created: Generated<Timestamp>;
  federated_id: string;
  id: Generated<number>;
  provider: string;
  user_id: string;
}

export interface UserGroup {
  group_name: string;
  user_id: string;
}

export interface DB {
  asset_ptr: AssetPtr;
  assignment: Assignment;
  assignment_submission: AssignmentSubmission;
  document: Document;
  document_ptr: DocumentPtr;
  project: Project;
  project_group: ProjectGroup;
  project_rev: ProjectRev;
  question_submission: QuestionSubmission;
  repo_question: RepoQuestion;
  repo_question_rev: RepoQuestionRev;
  repo_question_tag: RepoQuestionTag;
  repo_tag: RepoTag;
  repo_template: RepoTemplate;
  repo_worksheet: RepoWorksheet;
  repo_worksheet_rev: RepoWorksheetRev;
  repo_workspace: RepoWorkspace;
  repo_workspace_group: RepoWorkspaceGroup;
  series: Series;
  user_account: UserAccount;
  user_federated_identity: UserFederatedIdentity;
  user_group: UserGroup;
}
